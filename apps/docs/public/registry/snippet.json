{
  "name": "snippet",
  "type": "registry:ui",
  "registryDependencies": [
    "button",
    "tabs"
  ],
  "dependencies": [
    "lucide-react"
  ],
  "devDependencies": [],
  "files": [
    {
      "type": "registry:ui",
      "path": "index.tsx",
      "content": "'use client';\n\nimport { Button } from '@repo/shadcn-ui/components/ui/button';\nimport {\n  Tabs,\n  TabsContent,\n  TabsList,\n  TabsTrigger,\n} from '@repo/shadcn-ui/components/ui/tabs';\nimport { cn } from '@repo/shadcn-ui/lib/utils';\nimport { CheckIcon, CopyIcon } from 'lucide-react';\nimport {\n  type ComponentProps,\n  type ReactElement,\n  cloneElement,\n  createContext,\n  useContext,\n  useState,\n} from 'react';\n\ntype SnippetContext = {\n  value: string | undefined;\n};\n\nconst SnippetContext = createContext<SnippetContext | null>(null);\n\nexport const useSnippet = () => {\n  const context = useContext(SnippetContext);\n\n  if (!context) {\n    throw new Error('useSnippet must be used within a SnippetProvider');\n  }\n\n  return context;\n};\n\nexport type SnippetProps = ComponentProps<typeof Tabs>;\n\nexport const Snippet = (props: SnippetProps) => (\n  <SnippetContext.Provider\n    value={{ value: props.value ?? props.defaultValue ?? '' }}\n  >\n    <Tabs {...props}>{props.children}</Tabs>\n  </SnippetContext.Provider>\n);\n\nexport type SnippetHeaderProps = ComponentProps<'div'>;\n\nexport const SnippetHeader = (props: SnippetHeaderProps) => (\n  <div\n    className={cn(\n      'flex flex-row items-center justify-between border-b bg-fd-muted p-2',\n      props.className\n    )}\n    {...props}\n  />\n);\n\nexport type SnippetCopyButtonProps = ComponentProps<typeof Button> & {\n  asChild?: boolean;\n};\n\nexport const SnippetCopyButton = (props: SnippetCopyButtonProps) => {\n  const { value } = useSnippet();\n  const [isCopied, setIsCopied] = useState(false);\n\n  const copyToClipboard = () => {\n    if (\n      typeof window === 'undefined' ||\n      !navigator.clipboard.writeText ||\n      !value\n    ) {\n      return;\n    }\n\n    navigator.clipboard.writeText(value).then(() => {\n      setIsCopied(true);\n\n      setTimeout(() => {\n        setIsCopied(false);\n      }, 2000);\n    }, console.error);\n  };\n\n  if (props.asChild) {\n    return cloneElement(props.children as ReactElement, {\n      // @ts-expect-error - we know this is a button\n      onClick: copyToClipboard,\n    });\n  }\n\n  return (\n    <Button\n      variant=\"ghost\"\n      size=\"icon\"\n      onClick={copyToClipboard}\n      className=\"opacity-0 transition-opacity group-hover:opacity-100\"\n      {...props}\n    >\n      {isCopied ? <CheckIcon size={14} /> : <CopyIcon size={14} />}\n    </Button>\n  );\n};\n\nexport type SnippetTabsListProps = ComponentProps<typeof TabsList>;\n\nexport const SnippetTabsList = TabsList;\n\nexport type SnippetTabsTriggerProps = ComponentProps<typeof TabsTrigger>;\n\nexport const SnippetTabsTrigger = ({\n  className,\n  ...props\n}: SnippetTabsTriggerProps) => (\n  <TabsTrigger className={cn('gap-1.5', className)} {...props} />\n);\n\nexport type SnippetTabsContentProps = ComponentProps<typeof TabsContent>;\n\nexport const SnippetTabsContent = ({\n  className,\n  ...props\n}: SnippetTabsContentProps) => (\n  <TabsContent className={cn('mt-0', className)} {...props} />\n);\n",
      "target": "ui/index.tsx"
    }
  ]
}