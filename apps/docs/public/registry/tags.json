{
  "$schema": "https://ui.shadcn.com/schema/registry.json",
  "homepage": "https://www.kibo-ui.com/tags",
  "name": "tags",
  "type": "registry:ui",
  "author": "Hayden Bleasel <hello@haydenbleasel.com>",
  "registryDependencies": [
    "button",
    "command",
    "popover"
  ],
  "dependencies": [
    "lucide-react"
  ],
  "devDependencies": [],
  "files": [
    {
      "type": "registry:ui",
      "path": "index.tsx",
      "content": "'use client';\n\nimport { Button, type ButtonProps } from '@/components/ui/button';\nimport {\n  Command,\n  CommandEmpty,\n  CommandGroup,\n  CommandInput,\n  CommandItem,\n  CommandList,\n} from '@/components/ui/command';\nimport {\n  Popover,\n  PopoverContent,\n  PopoverTrigger,\n} from '@/components/ui/popover';\nimport { cn } from '@/lib/utils';\nimport { ChevronsUpDownIcon } from 'lucide-react';\nimport {\n  type ComponentProps,\n  type ReactNode,\n  createContext,\n  useContext,\n} from 'react';\n\ntype TagsContextType = {\n  value?: string;\n  setValue?: (value: string) => void;\n  open?: boolean;\n  setOpen?: (open: boolean) => void;\n};\n\nconst TagsContext = createContext<TagsContextType>({\n  value: undefined,\n  setValue: undefined,\n  open: undefined,\n  setOpen: undefined,\n});\n\nconst useTagsContext = () => {\n  const context = useContext(TagsContext);\n\n  if (!context) {\n    throw new Error('useTagsContext must be used within a TagsProvider');\n  }\n\n  return context;\n};\n\nexport type TagsProps = {\n  value?: string;\n  setValue?: (value: string) => void;\n  defaultValue?: string;\n  open?: boolean;\n  onOpenChange?: (open: boolean) => void;\n  children?: ReactNode;\n  className?: string;\n};\n\nexport const Tags = ({\n  value,\n  setValue,\n  defaultValue,\n  open,\n  onOpenChange,\n  children,\n  className,\n}: TagsProps) => (\n  <TagsContext.Provider\n    value={{ value, setValue, open, setOpen: onOpenChange }}\n  >\n    <Popover open={open} onOpenChange={onOpenChange}>\n      <div className={cn('relative', className)}>{children}</div>\n    </Popover>\n  </TagsContext.Provider>\n);\n\nexport type TagsTriggerProps = ButtonProps;\n\nexport const TagsTrigger = ({ className, ...props }: TagsTriggerProps) => (\n  <PopoverTrigger asChild>\n    <Button\n      variant=\"outline\"\n      // biome-ignore lint/a11y/useSemanticElements: \"Required\"\n      role=\"combobox\"\n      className={cn('w-full justify-between gap-2', className)}\n      {...props}\n    >\n      Select...\n      <ChevronsUpDownIcon size={16} className=\"shrink-0 opacity-50\" />\n    </Button>\n  </PopoverTrigger>\n);\n\nexport type TagsContentProps = ComponentProps<typeof PopoverContent>;\n\nexport const TagsContent = ({\n  className,\n  children,\n  ...props\n}: TagsContentProps) => (\n  <PopoverContent className={cn('p-0', className)} {...props}>\n    <Command>{children}</Command>\n  </PopoverContent>\n);\n\nexport type TagsInputProps = ComponentProps<typeof CommandInput>;\n\nexport const TagsInput = ({\n  placeholder,\n  className,\n  ...props\n}: TagsInputProps) => (\n  <CommandInput className={cn('h-9', className)} {...props} />\n);\n\nexport type TagsListProps = ComponentProps<typeof CommandList>;\n\nexport const TagsList = CommandList;\n\nexport type TagsEmptyProps = ComponentProps<typeof CommandEmpty>;\n\nexport const TagsEmpty = ({\n  children,\n  className,\n  ...props\n}: TagsEmptyProps) => (\n  <CommandEmpty {...props}>{children ?? 'No tags found.'}</CommandEmpty>\n);\n\nexport type TagsGroupProps = ComponentProps<typeof CommandGroup>;\n\nexport const TagsGroup = CommandGroup;\n\nexport type TagsItemProps = ComponentProps<typeof CommandItem>;\n\nexport const TagsItem = ({ className, ...props }: TagsItemProps) => (\n  <CommandItem className={cn('cursor-pointer', className)} {...props} />\n);\n",
      "target": "components/ui/kibo-ui/tags.tsx"
    }
  ]
}